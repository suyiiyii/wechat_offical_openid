# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc3
#   组件帮助文档：https://github.com/devsapp/fc3/blob/master/docs/zh/readme.md
#   Yaml参考文档：https://github.com/devsapp/fc3/blob/master/docs/zh/yaml/readme.md
#   关于Serverless Devs和FC组件的关系、如何声明/部署多个函数等问题，可以参考文档：https://github.com/devsapp/fc3/blob/master/docs/zh/tips.md
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 3.0.0
name: fc-custome-test
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "default"

vars: # 全局变量
  region: "cn-shenzhen"

actions:
  pre-deploy:
    - run: s deploy -t s.oss.yaml
      path: .


resources:
  hello_world:
    # 如果只想针对 hello_world 下面的业务进行相关操作，可以在命令行中加上 hello_world，例如：
    # 只对 hello_world 进行构建：s hello_world build
    # 如果不带有 hello_world ，而是直接执行 s build，工具则会对当前Yaml下，所有和 hello_world 平级的业务模块（如有其他平级的模块，例如下面注释的next_function），按照一定顺序进行 build 操作
    component: fc3 # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions:       # 自定义执行逻辑，关于actions 的使用，可以参考：https://docs.serverless-devs.com/serverless-devs/yaml#%E8%A1%8C%E4%B8%BA%E6%8F%8F%E8%BF%B0actions
      pre-deploy: # 在deploy之前运行
        - component: fc3 build  # 要运行的组件，格式为【component: 组件名 命令 参数】
    props:
      region: ${vars.region}              # 关于变量的使用方法，可以参考：https://docs.serverless-devs.com/serverless-devs/yaml#%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC
      functionName: "wx_userinfo_back"  # 函数名称
      layers:
        - acs:fc:cn-shenzhen:1759622571481595:layers/python_wxopenid/versions/1
      runtime: custom.debian10 # 运行时
      # description: 'hello world by serverless devs' # 函数描述
      timeout: 10 # 超时时间
      memorySize: 128 # 内存大小
      cpu: 0.1 # CPU 核数
      diskSize: 512 # 临时目录大小
      code: ./code # 代码路径
      instanceConcurrency: 50 # 并发实例个数
      customRuntimeConfig:
        port: 9000
        command:
          - python
          - server.py
      # environmentVariables:
      #   PATH: >-
      #     /var/fc/lang/python3.10/bin:/usr/local/bin/apache-maven/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ruby/bin:/opt/bin:/code:/code/bin
      #   PYTHONPATH: /opt/python:/code
      #   LD_LIBRARY_PATH: >-
      #     /code:/code/lib:/usr/local/lib:/opt/lib:/opt/php8.1/lib:/opt/php8.0/lib:/opt/php7.2/lib
      logConfig: 
        enableInstanceMetrics: true
        enableRequestMetrics: true
        logBeginRule: DefaultRegex
        project: aliyun-fc-cn-shenzhen-9e9de85a-9ae4-5304-ad8e-d903b9f56661
        logstore: function-log
      
      triggers:
        - triggerName: httpTrigger # 触发器名称
          triggerType: http # 触发器类型
          qualifier: LATEST # 触发服务的版本
          triggerConfig:
            authType: anonymous # 鉴权类型，可选值：anonymous、function
            disableURLInternet: false # 是否禁用公网访问 URL
            methods: # HTTP 触发器支持的访问方法，可选值：GET、POST、PUT、DELETE、HEAD
              - GET
              - POST

  # next_function: # 第二个函数的案例，仅供参考
  #  # 如果在当前项目下执行 s deploy，会同时部署模块
  #  # 如果想单独部署当前服务与函数，可以执行 s + 模块名/业务名 + deploy，例如：s next_function deploy
  #  # 如果想单独部署当前函数，可以执行 s + 模块名/业务名 + deploy function，例如：s next_function deploy function
  #  # 更多命令可参考：https://github.com/devsapp/fc3/blob/master/docs/zh/readme.md#文档相关
  #   component: fc3
  #   props:
  #     region: ${vars.region}
  #     functionName: next_function_example
  #     description: 'hello world by serverless devs'
  #     runtime: "undefined"
  #     codeUri: ./code/target
  #     handler: main
  #     memorySize: 128
  #     timeout: 60
